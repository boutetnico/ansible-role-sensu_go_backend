---
- name: Prepare
  hosts: all
  vars:
    docker__package_dependencies:
      - "apt-transport-https"
      - "gnupg2"
    docker__apt_key_id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
    docker__apt_key_url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    docker__apt_repository: >
      deb [arch=amd64]
      https://download.docker.com/linux/{{ ansible_distribution | lower }}
      {{ ansible_distribution_release }} {{ docker__channel | join (' ') }}
    docker__channel: ["stable"]
    docker__pip_dependencies:
      - "python3-pip"
    docker__pip_packages:
      - docker

  tasks:
    - name: Install Docker's dependencies
      ansible.builtin.apt:
        name: "{{ docker__package_dependencies + docker__pip_dependencies }}"
        update_cache: true

    - name: Add Docker's public GPG key to the APT keyring
      ansible.builtin.apt_key:
        id: "{{ docker__apt_key_id }}"
        url: "{{ docker__apt_key_url }}"

    - name: Configure Docker's upstream APT repository
      ansible.builtin.apt_repository:
        repo: "{{ docker__apt_repository }}"
        update_cache: true

    - name: Install Docker
      ansible.builtin.apt:
        name: docker-ce
        state: present

    - name: Install Python packages
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
      loop: "{{ docker__pip_packages }}"
      when: ansible_distribution_release != 'bookworm'

    - name: Install Python packages
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
        extra_args: --break-system-packages
      loop: "{{ docker__pip_packages }}"
      when: ansible_distribution_release == 'bookworm'
